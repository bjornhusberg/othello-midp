com.othello.OthelloBot -> obfuscated.e:
    com.othello.OthelloTable table -> a
    com.othello.OthelloGame game -> b
    byte recursionDepth -> c
    byte player -> d
    boolean dying -> e
    java.util.Random random -> f
    void play() -> a
    void kill() -> b
    byte[] findBestMove(byte,byte) -> a
    byte access$0(com.othello.OthelloBot) -> a
    byte access$1(com.othello.OthelloBot) -> b
    byte[] access$2(com.othello.OthelloBot,byte,byte) -> a
    boolean access$3(com.othello.OthelloBot) -> c
    com.othello.OthelloGame access$4(com.othello.OthelloBot) -> d
com.othello.OthelloBot$1 -> obfuscated.g:
    com.othello.OthelloBot this$0 -> a
    void run() -> run
com.othello.OthelloGame -> obfuscated.d:
    javax.microedition.midlet.MIDlet midlet -> a
    com.othello.OthelloTable table -> b
    javax.microedition.lcdui.Image[] tableLayers -> c
    byte[][] CELL_BOUNDS_X -> d
    byte[] CELL_BOUNDS_Y -> e
    javax.microedition.lcdui.Image renderedTable -> f
    javax.microedition.lcdui.Image offScreen -> g
    com.othello.OthelloTextBox textBox -> h
    com.othello.OthelloSettings settings -> i
    byte state -> j
    com.othello.OthelloBot[] othelloBots -> k
    byte currentPlayer -> l
    byte cursorX -> m
    byte cursorY -> n
    boolean exitSelected -> o
    boolean loadSelected -> p
    byte level -> q
    byte players -> r
    void stopGame(boolean) -> a
    void loadSavedGame() -> a
    void startNewGame() -> b
    void initializeBots() -> c
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
    void keyPressed(int) -> keyPressed
    void gameAction(int) -> a
    void levelSelectionAction(int) -> b
    void gameModeSelectionAction(int) -> c
    void displayLoadSelection() -> d
    void displayTitle() -> e
    void displayGameModeSelection() -> f
    void displayLevelSelection() -> g
    void displayGameOver() -> h
    void switchPlayer() -> i
    void putPiece(byte,byte) -> a
    void renderTable() -> j
    void renderCursor(javax.microedition.lcdui.Graphics,int,int) -> a
    void paint(javax.microedition.lcdui.Graphics) -> paint
    void access$0(com.othello.OthelloGame,javax.microedition.lcdui.Image[]) -> a
    com.othello.OthelloTextBox access$1(com.othello.OthelloGame) -> a
    void access$2(com.othello.OthelloGame) -> b
com.othello.OthelloGame$1 -> obfuscated.b:
    com.othello.OthelloGame this$0 -> a
    void run() -> run
com.othello.OthelloMIDlet -> com.othello.OthelloMIDlet:
    com.othello.OthelloGame game -> a
    void startApp() -> startApp
    void pauseApp() -> pauseApp
    void destroyApp(boolean) -> destroyApp
com.othello.OthelloSettings -> obfuscated.f:
    int recordId -> a
    javax.microedition.rms.RecordStore recordStore -> b
    byte[] saveBuffer -> c
    void saveSettings(byte,byte) -> a
    void saveGame(byte,byte,com.othello.OthelloTable,byte,byte,byte) -> a
    byte getPlayers() -> a
    byte getLevel() -> b
    boolean containsSavedGame() -> c
    void loadSavedTable(com.othello.OthelloTable) -> a
    byte getCurrentPlayer() -> d
    byte getCursorX() -> e
    byte getCursorY() -> f
com.othello.OthelloTable -> obfuscated.a:
    byte[][][] table -> b
    byte[][] score -> c
    byte currentTable -> d
    boolean title -> a
    void startNewGame() -> a
    byte getPiece(byte,byte) -> a
    byte getBlackScore() -> b
    byte getWhiteScore() -> c
    byte putPiece(byte,byte,byte) -> a
    boolean rewind() -> d
    byte alternatePlayer(byte) -> a
    boolean canMove(byte) -> b
    byte innerTurn(byte,byte,byte,byte,byte,byte) -> a
    int load(byte[],int) -> a
    int save(byte[],int) -> b
com.othello.OthelloTextBox -> obfuscated.c:
    int width -> a
    javax.microedition.lcdui.Image image -> b
    javax.microedition.lcdui.Image background -> c
    java.lang.String text -> d
    long textTime -> e
    boolean overlay -> f
    int[] alpha -> g
    int[] numeric -> h
    int[][] extra -> i
    void renderTextOverlay(java.lang.String) -> a
    void renderText(java.lang.String) -> b
    void renderTextImage(java.lang.String) -> c
    boolean paint(javax.microedition.lcdui.Graphics,int,int) -> a
    void removeOverlay() -> a
